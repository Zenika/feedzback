orbs:
  common: okode/common@2.0.13
  node: circleci/node@4 # the node orb provides common node-related configuration
  cypress: cypress-io/cypress@1
  browser-tools: circleci/browser-tools@1.2.5
  oss-ci-cd-tooling: apollo/oss-ci-cd-tooling@0.0.20

version: 2.1 # using 2.1 provides access to orbs and other features
executors:
  node:
    docker:
      - image: cimg/node:16.14.0
  with-chrome:
    resource_class: small
    docker:
      - image: cypress/browsers:node16.14.0-chrome99-ff97

jobs:
  install-client-dependencies:
    executor:
      name: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v45-packaging-dependencies-{{ checksum "client/package-lock.json"}}
            - v42-packaging-dependencies-{{ checksum "server/package-lock.json"}}
      - run:
          name: install_client_dependencies
          working_directory: client
          command: npm ci

      - run:
          name: install_server_dependencies
          working_directory: server
          command: npm ci

      # - run:
      #     name: set cypress environment variables
      #     working_directory: client
      #     command: echo ${FIREBASE_SERVICE_KEY} > firebase-service-key.json

      - save_cache:
          paths:
            - client/node_modules
          key: v45-packaging-dependencies-{{ checksum "client/package-lock.json" }}

      - save_cache:
          paths:
            - server/node_modules
          key: v42-packaging-dependencies-{{ checksum "server/package-lock.json" }}

  unit-test-client:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v45-packaging-dependencies-{{ checksum "client/package-lock.json" }}

      - run:
          name: unit-test
          working_directory: client
          command: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI

  unit-test-server:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v42-packaging-dependencies-{{ checksum "server/package-lock.json" }}

      - run: npm install jest

      - run:
          name: unit-test
          working_directory: server
          command: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI

  # set-serverApi-client:
  #    docker:
  #       - image: google/cloud-sdk
  #    steps:
  #      - checkout
  #      - run:
  #         name: Set up gcloud config
  #         command: |
  #           echo ${GCLOUD_KEY} > /tmp/sa_key.json
  #           gcloud auth activate-service-account --key-file=/tmp/sa_key.json
  #           rm /tmp/sa_key.json
  #           gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
  #           gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

  #  - run:
  #     name: set url
  #     working_directory: client
  #     command: |
  #       VERSION=`echo ${CIRCLE_BRANCH,,} | tr -dc '[:alnum:]\n\r' |  tr  '[:upper:]' '[:lower:]'`
  #       VERSION="server-${VERSION}"
  #       gcloud app versions describe ${VERSION} --service=server-service >> temp.txt
  #       URL=$(sed -n '/versionUrl/,$p' temp.txt)
  #       rm temp.txt
  #       URL=$(echo "$URL" | cut -d':' -f2,3)
  #       echo $URL
  #       sed  "s,<SERVER_API>,$URL,g" -i src/environments/environment.prod.ts
  #       cat src/environments/environment.prod.ts
  #  - persist_to_workspace:
  #      root: client
  #      paths:
  #        - src/environments/environment.prod.ts

  lint:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v45-packaging-dependencies-{{ checksum "client/package-lock.json" }}
      - run:
          name: lint-client
          working_directory: client
          command: npm run lint

  build:
    executor: node
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: client
      - restore_cache:
          keys:
            - v45-packaging-dependencies-{{ checksum "client/package-lock.json"}}
      - run:
          name: build_front_end
          working_directory: client
          command: npm run build -- --configuration=<< parameters.environment >>
      - persist_to_workspace:
          root: client
          paths:
            - dist/*

  deploy:
    docker:
      - image: google/cloud-sdk
    parameters:
      gcloud-key:
        type: string
      gcloud-project-id:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: client
      - restore_cache:
          keys:
            - v45-packaging-dependencies-{{ checksum "client/package-lock.json"}}

      - run:
          name: Set up and deploy gcloud config
          working_directory: client
          command: |
            echo << parameters.gcloud-key >> > /tmp/sa_key.json
            gcloud auth activate-service-account --key-file=/tmp/sa_key.json
            rm /tmp/sa_key.json
            gcloud --quiet config set project << parameters.gcloud-project-id >>
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      # - run:
      #     name: deploy-client
      #     working_directory: client
      #     command: |
      #          VERSION=`echo ${CIRCLE_BRANCH,,} | tr -dc '[:alnum:]\n\r' |  tr  '[:upper:]' '[:lower:]'`
      #          VERSION="client-${VERSION}"
      #          if [[ "${VERSION}" == "master" ]]
      #          then
      #          gcloud --quiet app deploy --version=$VERSION
      #          else
      #          gcloud --quiet app deploy --version=$VERSION --no-promote
      #          fi
      - run:
          name: deploy-client
          working_directory: client
          command: gcloud --quiet app deploy --version=promoted
      # - run:
      #     name: test-version-link
      #     working_directory: client
      #     command: |
      #           VERSION=`echo ${CIRCLE_BRANCH,,} | tr -dc '[:alnum:]\n\r' |  tr  '[:upper:]' '[:lower:]'`
      #           VERSION="client-${VERSION}"
      #           echo ${VERSION}
      #           cat src/environments/environment.prod.ts

  deploy-server:
    docker:
      - image: google/cloud-sdk
    parameters:
      mailgun-key:
        type: string
      mailgun-domain:
        type: string
      gcloud-key:
        type: string
      gcloud-project-id:
        type: string
      firebase-service-key:
        type: string
      client-url:
        type: string  
      environment:
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - v45-packaging-dependencies-{{ checksum "client/package-lock.json"}}
      - run: echo ${URL_CLIENT_FORM}
      - run:
          name: set env variables
          working_directory: server
          command: |
            echo << parameters.firebase-service-key >> > firebase-service-key.json
            sed "s/<API_KEY>/<< parameters.mailgun-key >>/g" -i app.yaml
            sed "s/<DOMAIN>/<< parameters.mailgun-domain >>/g" -i app.yaml
            sed "s/<GENERIC_EMAIL>/${GENERIC_EMAIL}/g" -i app.yaml
            sed "s/<GCLOUD_PROJECT_ID>/<< parameters.gcloud-project-id >>/g" -i app.yaml
            sed "s/<NODE_ENV>/<< parameters.environment >>/g" -i app.yaml
            sed "s/<URL_CLIENT>/<< parameters.client-url >>/g" -i app.yaml
      - run:
          name: test
          working_directory: server
          command: cat app.yaml
      - run:
          name: Set up gcloud config
          command: |
            echo << parameters.gcloud-key >> > /tmp/sa_key.json
            gcloud auth activate-service-account --key-file=/tmp/sa_key.json
            rm /tmp/sa_key.json
            gcloud --quiet config set project << parameters.gcloud-project-id >>
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: deploy-server
          working_directory: server
          command: gcloud app deploy --version=promoted
      # - run:
      #     name: deploy-server
      #     working_directory: server
      #     command: |
      #         VERSION=`echo ${CIRCLE_BRANCH,,} | tr -dc '[:alnum:]\n\r' |  tr  '[:upper:]' '[:lower:]'`
      #         VERSION="server-${VERSION}"
      #         if [[ "${VERSION}" == "master" ]]
      #         then
      #         gcloud app deploy --version=$VERSION
      #         else
      #         gcloud app deploy --version=$VERSION --no-promote
      #         fi

      # - run:
      #     name: set server url vraiable
      #     working_directory: server
      #     command: |
      #       VERSION=`echo ${CIRCLE_BRANCH,,} | tr -dc '[:alnum:]\n\r' |  tr  '[:upper:]' '[:lower:]'`
      #       VERSION="server-${VERSION}"
      #       gcloud app versions describe ${VERSION} --service=server-service >> temp.txt
      #       URL=$(sed -n '/versionUrl/,$p' temp.txt)
      #       rm temp.txt
      #       URL=$(echo "$URL" | cut -d':' -f2,3)
      #       echo $URL
      #       sed "s,<URL_CLIENT>,$URL,g" -i app.yaml

workflows:
  matrix-tests:
    jobs:
      - install-client-dependencies

      - unit-test-client:
          requires:
            - install-client-dependencies
      - unit-test-server:
          requires:
            - install-client-dependencies
      # - set-serverApi-client:
      #     requires:
      #        - deploy-server-prod
      - lint:
          requires:
            - unit-test-client
            - unit-test-server
      # DEV
      - build:
          name: build-dev
          environment: staging
          requires:
            - lint
          filters: &dev-filters
            branches:
              only: dev

      - deploy-server:
          name: deploy-server-dev
          mailgun-key: $MAILGUN_KEY_DEV
          mailgun-domain: $MAILGUN_DOMAIN_DEV
          gcloud-key: $GCLOUD_KEY_DEV
          gcloud-project-id: $GOOGLE_PROJECT_ID_DEV
          firebase-service-key: $FIREBASE_SERVICE_KEY_DEV
          client-url: https://feedzbackdev.znk.io/send
          environment: staging
          requires:
            - unit-test-server
          filters: *dev-filters

      - deploy:
          name: deploy-client-dev
          gcloud-key: $GCLOUD_KEY_DEV
          gcloud-project-id: $GOOGLE_PROJECT_ID_DEV
          requires:
            - build-dev
          filters: *dev-filters

      # PROD
      - build:
          name: build-prod
          environment: production
          requires:
            # - set-serverApi-client
            - lint
          filters: &prod-filters
            branches:
              only: master

      - deploy-server:
          name: deploy-server-prod
          mailgun-key: $API_KEY
          mailgun-domain: $DOMAIN
          gcloud-key: $GCLOUD_KEY
          gcloud-project-id: $GOOGLE_PROJECT_ID
          firebase-service-key: $FIREBASE_SERVICE_KEY
          client-url: https://feedzback.zenika.com/send
          environment: production
          requires:
            - unit-test-server
          filters: *prod-filters

      - deploy:
          name: deploy-client-prod
          gcloud-key: $GCLOUD_KEY
          gcloud-project-id: $GOOGLE_PROJECT_ID
          requires:
            - build-prod
          filters: *prod-filters
