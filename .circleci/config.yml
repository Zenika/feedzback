###############################################################################
# SETUP
###############################################################################
version: 2.1
orbs:
  # Pre-configured orb for GCP "gcloud" CLI
  gcp-cli: circleci/gcp-cli@3.1.1

executors:
  node:
    docker:
      - image: cimg/node:20.9
    resource_class: small

###############################################################################
# WORKFLOWS
###############################################################################
workflows:
  build-and-deploy_staging:
    jobs:
      ### Preparing and testing
      - prepare-workspace
      - node-install:
          name: node-install-<< matrix.working-directory >>
          requires:
            - prepare-workspace
          matrix:
            parameters:
              working-directory: ["server", "client"]
      - node-test:
          name: node-test-<< matrix.working-directory >>
          requires:
            - node-install-<< matrix.working-directory >>
          matrix:
            parameters:
              working-directory: ["server", "client"]
      ### Building server container with Google Cloud build
      - build-server:
          requires:
            - node-test-server
          name: build-server-for-revision
          context: feedzback-staging
      ### Deploying staging server (only on branch 'dev') on Google Cloud Run
      - deploy-server:
          requires:
            - build-server-for-revision
          name: deploy-staging-server
          context: feedzback-staging
          service-name: feedzback-staging
      ### Building all possible clients (staging, production)
      - build-client:
          requires:
            - node-test-client
          name: build-client-for-<< matrix.environment >>
          matrix:
            parameters:
              environment: ["staging"]
      - deploy-client:
          requires:
            - build-client-for-staging
          name: deploy-staging-client
          context: feedzback-staging
          environment: staging

jobs:
  prepare-workspace:
    executor: node
    steps:
      - run:
          name: Creating workspace directory
          command: mkdir -p workspace
      - checkout:
          path: workspace
      - persist_to_workspace:
          root: workspace
          paths:
            - client
            - server

  node-install:
    parameters:
      working-directory:
        type: string
    executor: node
    steps:
      - attach_workspace:
          at: workspace
      - restore_cache:
          name: Restoring NPM cache
          keys:
            - npm-deps-{{ checksum "./workspace/<< parameters.working-directory >>/package-lock.json" }}
      - run:
          name: Installing node modules
          working_directory: workspace/<< parameters.working-directory >>
          command: npm ci
      - save_cache:
          name: Storing NPM cache
          key: npm-deps-{{ checksum "./workspace/<< parameters.working-directory >>/package-lock.json" }}
          paths:
            - ./workspace/<< parameters.working-directory >>/node_modules

  node-test:
    parameters:
      working-directory:
        type: string
    executor: node
    steps:
      - attach_workspace:
          at: workspace
      - restore_cache:
          name: Restoring NPM cache
          keys:
            - npm-deps-{{ checksum "./workspace/<< parameters.working-directory >>/package-lock.json" }}
      - run:
          working_directory: workspace/<< parameters.working-directory >>
          name: Running tests in << parameters.working-directory >>
          # For the moment, passes with no tests
          command: npm run test

  build-server:
    parameters:
      service-name:
        default: feedzback-${CIRCLE_SHA1}
        type: string
    executor: gcp-cli/google
    steps:
      - gcp-cli/setup
      - checkout
      - run:
          working_directory: server
          name: Submitting Docker image to build
          command: |
            gcloud builds submit --tag ${GOOGLE_COMPUTE_ZONE}-docker.pkg.dev/${GOOGLE_PROJECT_ID}/cloud-run-source-deploy/feedzback:${CIRCLE_SHA1}

  deploy-server:
    parameters:
      service-name:
        default: feedzback-${CIRCLE_SHA1}
        type: string
    executor: gcp-cli/google
    steps:
      - gcp-cli/setup
      - run:
          working_directory: server
          name: Running gcloud run deploy
          command: |
            # Building update-env-vars argument
            ZZ="CLIENT_URL=https://staging.feedzback.znk.io"
            ZZ="${ZZ},SERVER_PORT=3000"
            ZZ="${ZZ},MAILGUN_USERNAME=${MAILGUN_USERNAME}"
            ZZ="${ZZ},MAILGUN_KEY=${MAILGUN_KEY}"
            ZZ="${ZZ},FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}"
            ZZ="${ZZ},FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}"
            ZZ="${ZZ},FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}"
            gcloud run deploy << parameters.service-name >> --image ${GOOGLE_COMPUTE_ZONE}-docker.pkg.dev/${GOOGLE_PROJECT_ID}/cloud-run-source-deploy/feedzback:${CIRCLE_SHA1} --allow-unauthenticated  --platform=managed --region=${GOOGLE_COMPUTE_ZONE} --port=3000 --update-env-vars $ZZ

  build-client:
    parameters:
      environment:
        default: staging
        type: string
    executor: node
    steps:
      - attach_workspace:
          at: workspace
      - restore_cache:
          name: Restoring NPM cache
          keys:
            - npm-deps-{{ checksum "./workspace/client/package-lock.json" }}
      - run:
          working_directory: workspace/client
          name: Building << parameters.environment >> package
          # For the moment, passes with no tests
          command: npm run build:<< parameters.environment >>
      - persist_to_workspace:
          root: workspace
          paths:
            - client/dist/<< parameters.environment >>

  deploy-client:
    parameters:
      environment:
        default: staging
        type: string
    executor: node
    steps:
      - attach_workspace:
          at: workspace
      - run:
          name: Installing Firebase client
          command: |
            curl -Lo ./firebase_bin https://firebase.tools/bin/linux/latest
            chmod +x ./firebase_bin
      - run:
          name: Preparing credentials for Firebase client
          command: |
            echo ${GCLOUD_SERVICE_KEY} > ./workspace/firebase-service-account.json
      - run:
          name: Deploying client
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=./workspace/firebase-service-account.json
            ./firebase_bin use << parameters.environment >>
            ./firebase_bin deploy --config ./workspace/client/firebase.json --only hosting:<< parameters.environment >>
