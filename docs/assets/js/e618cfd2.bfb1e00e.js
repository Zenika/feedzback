"use strict";(self.webpackChunkfeedzback_docs=self.webpackChunkfeedzback_docs||[]).push([[5104],{1692:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"usage-analytics","title":"Usage analytics","description":"1. The plugin Stream Firestore to BigQuery streams every change in the firestore DB into a BigQuery table (including the user e-mails which are personal data, but the feedback itself is encrypted)","source":"@site/docs/usage-analytics.md","sourceDirName":".","slug":"/usage-analytics","permalink":"/feedzback/docs/usage-analytics","draft":false,"unlisted":false,"editUrl":"https://github.com/Zenika/feedzback/tree/main/docs-source/docs/usage-analytics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"default","previous":{"title":"CircleCI","permalink":"/feedzback/docs/ci-cd/circle-ci"},"next":{"title":"Client app","permalink":"/feedzback/docs/update/client"}}');var i=t(4848),o=t(8453);const a={},c="Usage analytics",r={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"usage-analytics",children:"Usage analytics"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The plugin ",(0,i.jsx)(n.em,{children:"Stream Firestore to BigQuery"})," streams every change in the firestore DB into a BigQuery table (including the user e-mails which are personal data, but the feedback itself is encrypted)"]}),"\n",(0,i.jsxs)(n.li,{children:["A Cloud function runs a query that aggregates data into another dataset called ",(0,i.jsx)(n.code,{children:"feedzback_usage"})," every day, removing personal data. Using a service account ",(0,i.jsx)(n.code,{children:"analytics-editor"})," that has access to all data in BQ"]}),"\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.a,{href:"https://lookerstudio.google.com/s/mZFWci2C24Q",children:"Looker Studio report"})," query the tables from ",(0,i.jsx)(n.code,{children:"feedzback_usage"})," using a service-account ",(0,i.jsx)(n.code,{children:"analytics-viewer"})," which has access only to ",(0,i.jsx)(n.code,{children:"feedzback_usage"})," and does not have access to personal data."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"This document describes the installation instructions."})}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Be an owner of the project."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"In Cloud Shell, find the zone of your Firestore database."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"gcloud firestore databases list\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:['Activate the plugin "',(0,i.jsx)(n.a,{href:"https://extensions.dev/extensions/firebase/firestore-bigquery-export",children:"Stream Firestore to BigQuery"}),'" in your project']}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["This will enable the APIs","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"BigQuery API"}),"\n",(0,i.jsx)(n.li,{children:"Cloud Tasks API"}),"\n",(0,i.jsx)(n.li,{children:"Eventarc API"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["In the Configuration step, configure the extension as follow","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Cloud functions location : Same as your firestore location (or closest if not available)"}),"\n",(0,i.jsxs)(n.li,{children:["BigQuery dataset location : Same as your firestore location (or closest if not available). Remember this as your ",(0,i.jsx)(n.code,{children:"$ANALYTICS_GCP_ZONE"})]}),"\n",(0,i.jsx)(n.li,{children:"Collection path : feedback"}),"\n",(0,i.jsx)(n.li,{children:"Dataset ID : firestore_export"}),"\n",(0,i.jsx)(n.li,{children:"Table ID : feedback"}),"\n",(0,i.jsxs)(n.li,{children:["Import existing Firestore documents into BigQuery ? : Yes (If you forgot to check it use ",(0,i.jsx)(n.a,{href:"https://github.com/firebase/extensions/blob/master/firestore-bigquery-export/guides/IMPORT_EXISTING_DOCUMENTS.md",children:"this"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Existing documents collection : feedback"}),"\n",(0,i.jsxs)(n.li,{children:["Leave other parameters as default, do not check ",(0,i.jsx)(n.code,{children:"Enable events"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"In Circle CI, go to the /Organization settings/Context page of your project and add the environment variable $ANALYTICS_GCP_ZONE ."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"In Cloud Shell, tell the shell where is your analytics zone"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# The zone of the existing firestore db. Due to a misconfiguration it is in Montreal for the dev environment.\nexport ANALYTICS_GCP_ZONE="<zone found in previous step>"\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"In Cloud Shell, Allow CircleCI to deploy Cloud functions. Every change in the function will be deployed the same way as the rest of the codebase."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'gcloud projects add-iam-policy-binding ${GOOGLE_CLOUD_PROJECT} --member="serviceAccount:circleci@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com" --role="roles/cloudfunctions.developer"\ngcloud projects add-iam-policy-binding ${GOOGLE_CLOUD_PROJECT} \\\n--member="serviceAccount:circleci@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com" \\\n--role="roles/iam.serviceAccountUser"\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:["Wait for the ",(0,i.jsx)(n.code,{children:"firestore_export"})," dataset to be created by the extension"]}),"\n",(0,i.jsx)(n.li,{children:"In Cloud Shell, create the service accounts and the bigquery dataset"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create feedzback_usage that will only store non-personal data\nbq --location=$ANALYTICS_GCP_ZONE mk --dataset ${GOOGLE_CLOUD_PROJECT}:feedzback_usage\n\n\ngcloud iam service-accounts create analytics-editor  --display-name="Service account to read or write analytics based on the firestore export"\ngcloud iam service-accounts create analytics-viewer --display-name="Service account dedicated to looker studio to allow it to read only feedzback_usage"\n\n# Allow analytics-editor to read and write on the firestore_export. It can be done in the web console or using the following lines\nbq show --format=prettyjson ${GOOGLE_CLOUD_PROJECT}:firestore_export > /tmp/firestore_export.json\njq \'.access += [{"role" : "READER", "userByEmail" : "analytics-editor@\'${GOOGLE_CLOUD_PROJECT}\'.iam.gserviceaccount.com"},{"role" : "WRITER", "userByEmail" : "analytics-editor@\'${GOOGLE_CLOUD_PROJECT}\'.iam.gserviceaccount.com"} ]\' /tmp/firestore_export.json > /tmp/firestore_export_updated.json\nbq update --source /tmp/firestore_export_updated.json firestore_export\n\n# Allow analytics-editor to use BQ\ngcloud projects add-iam-policy-binding ${GOOGLE_CLOUD_PROJECT} --member="serviceAccount:analytics-editor@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com" --role="roles/bigquery.user"\n\n# Allow analytics-viewer to create queries in BQ\ngcloud projects add-iam-policy-binding ${GOOGLE_CLOUD_PROJECT} --member="serviceAccount:analytics-viewer@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com" --role="roles/bigquery.user"\n\n# Modify feedzback_usage so it is owned by analytics-editor and readable by analytics-viewer\nbq show --format=prettyjson ${GOOGLE_CLOUD_PROJECT}:feedzback_usage > /tmp/feedzback_usage.json\njq \'.access += [{"role" : "READER", "userByEmail" : "analytics-viewer@\'${GOOGLE_CLOUD_PROJECT}\'.iam.gserviceaccount.com"},{"role" : "OWNER", "userByEmail" : "analytics-editor@\'${GOOGLE_CLOUD_PROJECT}\'.iam.gserviceaccount.com"}]\' /tmp/feedzback_usage.json > /tmp/feedzback_usage_updated.json\nbq update --source /tmp/feedzback_usage_updated.json feedzback_usage\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:"On your computer Create the tag for your revision and push it. The CI should deploy the cloud function"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git tag <your tag e.g. dev-1.2.3>\ngit push --tags\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"7",children:["\n",(0,i.jsx)(n.li,{children:"In Cloud Shell, configure Cloud Scheduler for a daily export. If it does not work make sure circle-ci has deployed the cloud function"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# If asked to enable cloudscheduler API, say yes\ngcloud scheduler jobs create http daily_usage_export \\\n--location=${ANALYTICS_GCP_ZONE} \\\n--schedule=\'0 0 * * *\' \\\n--uri "https://${ANALYTICS_GCP_ZONE}-${GOOGLE_CLOUD_PROJECT}.cloudfunctions.net/create-analytics" \\\n--http-method=POST \\\n--oidc-service-account-email="analytics-editor@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com" \\\n--oidc-token-audience="https://${ANALYTICS_GCP_ZONE}-${GOOGLE_CLOUD_PROJECT}.cloudfunctions.net/create-analytics"\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"8",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://app.circleci.com/pipelines/github/Zenika/feedzback",children:"Wait for the CI"})," to have deployed the cloud function"]}),"\n",(0,i.jsx)(n.li,{children:"In Cloud Shell, give the analytics-editor service account the rights to invoke cloud function. Then run it once once to initialize the database"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'gcloud functions add-invoker-policy-binding create-analytics --member="serviceAccount:analytics-editor@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com" --region="${ANALYTICS_GCP_ZONE}"\n\ngcloud functions call create-analytics --gen2 --region=${ANALYTICS_GCP_ZONE}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"10",children:["\n",(0,i.jsx)(n.li,{children:"In Cloud Shell, grant looker studio the right to use service accounts to retrieve data"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# NB : the value of member can be found here : https://lookerstudio.google.com/serviceAgentHelp\ngcloud projects add-iam-policy-binding ${GOOGLE_CLOUD_PROJECT} --member="serviceAccount:service-org-506755999458@gcp-sa-datastudio.iam.gserviceaccount.com" --role="roles/iam.serviceAccountTokenCreator"\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"11",children:["\n",(0,i.jsxs)(n.li,{children:["Modify ",(0,i.jsx)(n.a,{href:"https://lookerstudio.google.com/s/mZFWci2C24Q",children:"the looker studio report"})," to include your analysis. ",(0,i.jsxs)(n.strong,{children:["Make sure each datasource uses the service account ",(0,i.jsx)(n.code,{children:"analytics-viewer@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com"})]}),". By default it uses your google account which has the owner rights."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(6540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);